#!/bin/bash
#variables
nombre=$1 
tipo=$2
repositorio=$3
api=1
front=1
git=0
nopushear=1

#COLORES
ROJO='\033[0;31m'
VERDE='\033[0;32m'
AMARILLO='\033[0;33m'
AZUL='\033[0;34m'
NC='\033[0m' 
AZUL_FLOJO='\033[0;36m'


if [[ -z $nombre  || -z $tipo ]]; then
echo -e "${ROJO}ERROR DE USO (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª${NC}"
echo -e "${AZUL_FLOJO}USO:${NC} iniciar <nombre> <tipo> <repositorio>"
echo -e "${VERDE}nombre:${NC} nombre de la api | gemelo digital ${AZUL}OBLIGATORIO${NC}"
echo -e "${VERDE}tipo:${NC} tipo de aplicaci√≥n api | api+frontend |ni gemelo ${AZUL}OBLIGATORIO${NC}"
echo -e "${VERDE}repositorio:${NC} 2URL del repositorio ${AMARILLO}VACIO${NC} al que vincularse es ${AMARILLO}OPCIONAL${NC} "
echo -e "\t ${AMARILLO}-${NC}Si no se ofrece se creara el repositorio local y no se ${AMARILLO}pusheara${NC}"

#comprobar admin
if !net session > /dev/null 2>&1; then
    echo -e "${AMARILLO} Si${NC} es la primera vez que ejecutas este script ejecutalo en una terminal como ${AZUL_FLOJO}ADMINISTRADOR${NC}"
fi
exit -1
fi




if [[ $(echo $tipo | grep "api" | wc -l ) -eq 1 ]]; then
mapfile -t carpetasAPI < <(find /proyectos/api -maxdepth 1 | awk 'NR>1{print $0}' )
api=0
fi


if [[ $(echo $tipo | grep "front" | wc -l) -eq 1 ]]; then
    if ! command -v pnpm &>/dev/null; then
    echo -e "Instalando ${AZUL_FLOJO}PNPM${NC}"
    curl -fsSL https://get.pnpm.io/install.sh > install
    ./install
    rm install
    fi
    front=0
    mapfile -t carpetasFront < <(find /proyectos/front -maxdepth 1 | awk 'NR>1{print $0}' )
fi

if [[ $(ls -a | grep .git | wc -l) -eq 1 ]]; then
    git=0
    nopushear=1
else
    git=1
    nopushear=0
fi

if [[ -z $repositorio ]]; then
    nopushear=1
    git=0
fi

front(){
    
    for ((i = 0; i < ${#carpetasFront[@]}; i++)); do
        cp -r ${carpetasFront[i]} frontend 
    done
        
    if [[ $(ls | grep docker | wc -l) -eq 1 ]]; then
        sed -i "s/sistema/$nombre/g" frontend/service
        sed -i "s/SUPER/$nombre/g" frontend/service

        cat frontend/service >> docker-compose.yaml
        rm frontend/docker-compose.yaml &
    
    else
        sed -i "s/sistema/$nombre/g" frontend/docker-compose.yaml
        sed -i "s/SUPER/$(basename $(pwd))/g" frontend/docker-compose.yaml
        mv frontend/docker-compose.yaml .
    fi
    if [[ $(ls | grep Makefile | wc -l) -eq 1 ]]; then
        rm frontend/Makefile &
    else
        sed -i "s/sistema/$nombre/g" frontend/Makefile
        sed -i "s/SUPER/$(basename $(pwd))/g" frontend/Makefile
        mv frontend/Makefile .
    fi

    rm frontend/service &
    echo -e "${AZUL} ${AMARILLO}FRONTEND${NC} ACABADO üì∫"
    
}


versiones(){

if [[ $(ls -a | grep .git | wc -l) -ne 1 ]]; then
        git init 1>/dev/null
    fi

git branch -m main
if [[ $api -eq 0 ]]; then
git add . 2>/dev/null 1>/dev/null
git reset frontend
git commit -m "Estructura basica de proyectos API: $nombre" 1> /dev/null
fi

if [[ $front -eq 0 ]]; then
git add . 2>/dev/null 1>/dev/null

if [[ $(ls | grep $nombre | wc -l) -eq 1 ]]; then
git reset $nombre
fi
git commit -m "Estructura basica de proyectos FRONTEND" 1> /dev/null
fi
if [[ $git -eq 1 ]]; then
echo "cosas"
git remote add origin $repositorio
git push --set-upstream origin main
fi

if [[ $nopushear -eq 0 ]]; then
git push
fi

echo -e "${AZUL}- ${AMARILLO}GIT${NC} ACABADO ${AZUL}üõÇ|${NC}"

}



dependencias(){
if ! command -v allure &>/dev/null; then
curl -o allure-commandline.zip -L https://github.com/allure-framework/allure2/releases/download/2.13.8/allure-2.13.8.zip

mkdir -p ~/allure

unzip -o allure-commandline.zip -d ~/allure 
rm allure-commandline.zip

echo 'export PATH=$PATH:~/allure/allure-2.13.8/bin' >> /c/Program\ Files/Git/etc/bash.bashrc
if [[ $? -ne 0 ]]; then
    allurefallado=1
   
fi
fi

cd $nombre
uv add fastapi asyncio sqlalchemy uvicorn asyncpg httpx pytest pytest-tornasync allure-pytest pytest-cov
cd ..

echo -e "${AZUL}- ${AMARILLO}API${NC} ACABADO ‚öô"
}




api(){
if ! command -v uv &>/dev/null; then
    pip install uv
  echo 'export PATH=$PATH:~/AppData/Local/Packages/PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0/LocalCache/local-packages/Python311/Scripts/' >> /c/Program\ Files/Git/etc/bash.bashrc
fi
    
uv -v init $nombre -p 3.11.9

mv $nombre/.git .


for ((i = 0; i < ${#carpetasAPI[@]}; i++)); do
    cp -r ${carpetasAPI[i]} $nombre
done

mv $nombre/docker-compose.yaml .
mv $nombre/Makefile .
cp $nombre/README.md .
sed -i "s/sistema/$nombre/g" $nombre/Dockerfile
sed -i "s/sistema/$nombre/g" docker-compose.yaml

sed -i "s/sistema/$nombre/g" Makefile
sed -i "s/SUPER/$(basename $(pwd))/g" Makefile

for file in $(find . -iname "*.py" | grep init -v | grep venv -v); do
    sed -i "s/sistema/$nombre/g" $file
done

dependencias $nombre

}
if [[ $front -eq 0 ]]; then
pnpm create vite frontend --template react
cd frontend && pnpm install && cd ..
fi

if [[ $api -eq 0 ]]; then
api $nombre api 
fi

if [[ $front -eq 0 ]]; then
front
fi

versiones
if [[ $allurefallado -eq 1 ]]; then
    echo -e "La instalaci√≥n de ${AMARILLO}ALLURE ${NC} no ha se ha echo correctamente para finalizarla haz esto en una bash abierta como ${AZUL_FLOJO} administrador${NC}" 
    echo -e "echo 'export PATH=\$PATH:~/allure/allure-1.13.8/bin' >> /c/Program\ Files/Git/etc/bash.bashrc"
    fi
    


echo "FIN (*^‚ñΩ^*)"
